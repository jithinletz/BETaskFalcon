//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BETask.DAL.EDMX
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class betaskdbEntities : DbContext
    {
        public betaskdbEntities()
            : base("name=betaskdbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<account_group> account_group { get; set; }
        public virtual DbSet<account_ledger> account_ledger { get; set; }
        public virtual DbSet<account_transaction> account_transaction { get; set; }
        public virtual DbSet<account_transaction_cheque> account_transaction_cheque { get; set; }
        public virtual DbSet<building> building { get; set; }
        public virtual DbSet<company> company { get; set; }
        public virtual DbSet<cost_center> cost_center { get; set; }
        public virtual DbSet<coupon> coupon { get; set; }
        public virtual DbSet<coupon_leaf> coupon_leaf { get; set; }
        public virtual DbSet<customer_aggrement> customer_aggrement { get; set; }
        public virtual DbSet<customer_asset> customer_asset { get; set; }
        public virtual DbSet<customer_division> customer_division { get; set; }
        public virtual DbSet<daily_collection> daily_collection { get; set; }
        public virtual DbSet<default_values> default_values { get; set; }
        public virtual DbSet<delivery> delivery { get; set; }
        public virtual DbSet<delivery_book> delivery_book { get; set; }
        public virtual DbSet<delivery_item_summary> delivery_item_summary { get; set; }
        public virtual DbSet<delivery_items> delivery_items { get; set; }
        public virtual DbSet<delivery_return> delivery_return { get; set; }
        public virtual DbSet<do_sales_item> do_sales_item { get; set; }
        public virtual DbSet<document_serial> document_serial { get; set; }
        public virtual DbSet<employee> employee { get; set; }
        public virtual DbSet<item> item { get; set; }
        public virtual DbSet<item_damage> item_damage { get; set; }
        public virtual DbSet<item_return_exception> item_return_exception { get; set; }
        public virtual DbSet<item_transaction> item_transaction { get; set; }
        public virtual DbSet<ledger_mapping> ledger_mapping { get; set; }
        public virtual DbSet<loading> loading { get; set; }
        public virtual DbSet<mail_settings> mail_settings { get; set; }
        public virtual DbSet<offer> offer { get; set; }
        public virtual DbSet<pdc> pdc { get; set; }
        public virtual DbSet<privilege_menu> privilege_menu { get; set; }
        public virtual DbSet<privileges> privileges { get; set; }
        public virtual DbSet<production> production { get; set; }
        public virtual DbSet<production_mapping> production_mapping { get; set; }
        public virtual DbSet<production_mapping_rowmaterial> production_mapping_rowmaterial { get; set; }
        public virtual DbSet<production_rawmaterial> production_rawmaterial { get; set; }
        public virtual DbSet<purchase_order> purchase_order { get; set; }
        public virtual DbSet<purchase_order_item> purchase_order_item { get; set; }
        public virtual DbSet<purchase_return> purchase_return { get; set; }
        public virtual DbSet<purchase_return_item> purchase_return_item { get; set; }
        public virtual DbSet<route> route { get; set; }
        public virtual DbSet<route_group> route_group { get; set; }
        public virtual DbSet<sales> sales { get; set; }
        public virtual DbSet<sales_item> sales_item { get; set; }
        public virtual DbSet<sales_return> sales_return { get; set; }
        public virtual DbSet<sales_return_item> sales_return_item { get; set; }
        public virtual DbSet<status> status { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tax_setting> tax_setting { get; set; }
        public virtual DbSet<transfer_item> transfer_item { get; set; }
        public virtual DbSet<uom_setting> uom_setting { get; set; }
        public virtual DbSet<user_log> user_log { get; set; }
        public virtual DbSet<wallet_history> wallet_history { get; set; }
        public virtual DbSet<customer> customer { get; set; }
        public virtual DbSet<system_settings> system_settings { get; set; }
        public virtual DbSet<do_sales> do_sales { get; set; }
        public virtual DbSet<purchase> purchase { get; set; }
        public virtual DbSet<purchase_item> purchase_item { get; set; }
        public virtual DbSet<cost_center_transaction> cost_center_transaction { get; set; }
    
        public virtual ObjectResult<SP_CostCenterDatewiseDetailed_Result> SP_CostCenterDatewiseDetailed(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> primaryId, Nullable<int> costCenterId)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var primaryIdParameter = primaryId.HasValue ?
                new ObjectParameter("primaryId", primaryId) :
                new ObjectParameter("primaryId", typeof(int));
    
            var costCenterIdParameter = costCenterId.HasValue ?
                new ObjectParameter("costCenterId", costCenterId) :
                new ObjectParameter("costCenterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CostCenterDatewiseDetailed_Result>("SP_CostCenterDatewiseDetailed", dateFromParameter, dateToParameter, primaryIdParameter, costCenterIdParameter);
        }
    
        public virtual ObjectResult<SP_CostCenterDetailed_Result> SP_CostCenterDetailed(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CostCenterDetailed_Result>("SP_CostCenterDetailed", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<SP_CostCenterSummary_Result> SP_CostCenterSummary(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CostCenterSummary_Result>("SP_CostCenterSummary", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<SP_CreateCompareDeliverySaleCollection_Result> SP_CreateCompareDeliverySaleCollection(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CreateCompareDeliverySaleCollection_Result>("SP_CreateCompareDeliverySaleCollection", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<SP_CustomerSummary_Result> SP_CustomerSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CustomerSummary_Result>("SP_CustomerSummary");
        }
    
        public virtual ObjectResult<SP_DeliverySalePaymentMode_Result> SP_DeliverySalePaymentMode(Nullable<int> deliveryId)
        {
            var deliveryIdParameter = deliveryId.HasValue ?
                new ObjectParameter("deliveryId", deliveryId) :
                new ObjectParameter("deliveryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DeliverySalePaymentMode_Result>("SP_DeliverySalePaymentMode", deliveryIdParameter);
        }
    
        public virtual ObjectResult<SP_DeliverySalesReport_Result> SP_DeliverySalesReport(Nullable<int> employeeId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> itemId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DeliverySalesReport_Result>("SP_DeliverySalesReport", employeeIdParameter, dateFromParameter, dateToParameter, itemIdParameter);
        }
    
        public virtual ObjectResult<SP_DeliverySalesReportRoutewise_Result> SP_DeliverySalesReportRoutewise(Nullable<int> routeId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> itemId)
        {
            var routeIdParameter = routeId.HasValue ?
                new ObjectParameter("routeId", routeId) :
                new ObjectParameter("routeId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DeliverySalesReportRoutewise_Result>("SP_DeliverySalesReportRoutewise", routeIdParameter, dateFromParameter, dateToParameter, itemIdParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_FOCbyPaymentmode_Result> SP_FOCbyPaymentmode(Nullable<int> deliveryId)
        {
            var deliveryIdParameter = deliveryId.HasValue ?
                new ObjectParameter("deliveryId", deliveryId) :
                new ObjectParameter("deliveryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FOCbyPaymentmode_Result>("SP_FOCbyPaymentmode", deliveryIdParameter);
        }
    
        public virtual ObjectResult<SP_GetDeliveryItemsByDeliveryId_Result> SP_GetDeliveryItemsByDeliveryId(Nullable<int> deliveryId)
        {
            var deliveryIdParameter = deliveryId.HasValue ?
                new ObjectParameter("deliveryId", deliveryId) :
                new ObjectParameter("deliveryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDeliveryItemsByDeliveryId_Result>("SP_GetDeliveryItemsByDeliveryId", deliveryIdParameter);
        }
    
        public virtual ObjectResult<SP_LedgerSearch_Result> SP_LedgerSearch(string ledgerName, Nullable<int> maxCount)
        {
            var ledgerNameParameter = ledgerName != null ?
                new ObjectParameter("ledgerName", ledgerName) :
                new ObjectParameter("ledgerName", typeof(string));
    
            var maxCountParameter = maxCount.HasValue ?
                new ObjectParameter("maxCount", maxCount) :
                new ObjectParameter("maxCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LedgerSearch_Result>("SP_LedgerSearch", ledgerNameParameter, maxCountParameter);
        }
    
        public virtual ObjectResult<SP_MiscWalletDefference_Result> SP_MiscWalletDefference()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MiscWalletDefference_Result>("SP_MiscWalletDefference");
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_OpeningStockPandL(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_OpeningStockPandL", dateParameter);
        }
    
        public virtual ObjectResult<SP_SalesMonthlyAnalysis_Result> SP_SalesMonthlyAnalysis(Nullable<int> saleyear)
        {
            var saleyearParameter = saleyear.HasValue ?
                new ObjectParameter("saleyear", saleyear) :
                new ObjectParameter("saleyear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SalesMonthlyAnalysis_Result>("SP_SalesMonthlyAnalysis", saleyearParameter);
        }
    
        public virtual ObjectResult<SP_SyncCustomerOutstanding_Result> SP_SyncCustomerOutstanding()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SyncCustomerOutstanding_Result>("SP_SyncCustomerOutstanding");
        }
    
        public virtual ObjectResult<SP_SyncCustomerOutstandingRoutewise_Result> SP_SyncCustomerOutstandingRoutewise(Nullable<int> routeId)
        {
            var routeIdParameter = routeId.HasValue ?
                new ObjectParameter("routeId", routeId) :
                new ObjectParameter("routeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SyncCustomerOutstandingRoutewise_Result>("SP_SyncCustomerOutstandingRoutewise", routeIdParameter);
        }
    
        public virtual int SP_SyncOutstandingToWallet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SyncOutstandingToWallet");
        }
    
        public virtual ObjectResult<SP_TrialBalanceDetailed_Result> SP_TrialBalanceDetailed(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_TrialBalanceDetailed_Result>("SP_TrialBalanceDetailed", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<SP_TrialBalanceSummary_Result> SP_TrialBalanceSummary(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_TrialBalanceSummary_Result>("SP_TrialBalanceSummary", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<SP_SalesMonthlyItemAnalysis_Result> SP_SalesMonthlyItemAnalysis(Nullable<int> saleyear, Nullable<int> itemId)
        {
            var saleyearParameter = saleyear.HasValue ?
                new ObjectParameter("saleyear", saleyear) :
                new ObjectParameter("saleyear", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SalesMonthlyItemAnalysis_Result>("SP_SalesMonthlyItemAnalysis", saleyearParameter, itemIdParameter);
        }
    }
}
