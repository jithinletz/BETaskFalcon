//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BETaskSync.EDMX
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class betaskdbEntitiesLocal : DbContext
    {
        public betaskdbEntitiesLocal()
            : base("name=betaskdbEntitiesLocal")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<account_group> account_group { get; set; }
        public virtual DbSet<account_ledger> account_ledger { get; set; }
        public virtual DbSet<account_transaction> account_transaction { get; set; }
        public virtual DbSet<account_transaction_cheque> account_transaction_cheque { get; set; }
        public virtual DbSet<company> company { get; set; }
        public virtual DbSet<coupon> coupon { get; set; }
        public virtual DbSet<coupon_leaf> coupon_leaf { get; set; }
        public virtual DbSet<customer_aggrement> customer_aggrement { get; set; }
        public virtual DbSet<daily_collection> daily_collection { get; set; }
        public virtual DbSet<default_values> default_values { get; set; }
        public virtual DbSet<delivery> delivery { get; set; }
        public virtual DbSet<delivery_item_summary> delivery_item_summary { get; set; }
        public virtual DbSet<delivery_items> delivery_items { get; set; }
        public virtual DbSet<delivery_return> delivery_return { get; set; }
        public virtual DbSet<document_serial> document_serial { get; set; }
        public virtual DbSet<employee> employee { get; set; }
        public virtual DbSet<item> item { get; set; }
        public virtual DbSet<item_damage> item_damage { get; set; }
        public virtual DbSet<item_return_exception> item_return_exception { get; set; }
        public virtual DbSet<item_transaction> item_transaction { get; set; }
        public virtual DbSet<ledger_mapping> ledger_mapping { get; set; }
        public virtual DbSet<mail_settings> mail_settings { get; set; }
        public virtual DbSet<pdc> pdc { get; set; }
        public virtual DbSet<privilege_menu> privilege_menu { get; set; }
        public virtual DbSet<privileges> privileges { get; set; }
        public virtual DbSet<production> production { get; set; }
        public virtual DbSet<production_mapping> production_mapping { get; set; }
        public virtual DbSet<production_mapping_rowmaterial> production_mapping_rowmaterial { get; set; }
        public virtual DbSet<production_rawmaterial> production_rawmaterial { get; set; }
        public virtual DbSet<purchase> purchase { get; set; }
        public virtual DbSet<purchase_item> purchase_item { get; set; }
        public virtual DbSet<purchase_order> purchase_order { get; set; }
        public virtual DbSet<purchase_order_item> purchase_order_item { get; set; }
        public virtual DbSet<purchase_return> purchase_return { get; set; }
        public virtual DbSet<purchase_return_item> purchase_return_item { get; set; }
        public virtual DbSet<route> route { get; set; }
        public virtual DbSet<sales> sales { get; set; }
        public virtual DbSet<sales_item> sales_item { get; set; }
        public virtual DbSet<sales_return> sales_return { get; set; }
        public virtual DbSet<sales_return_item> sales_return_item { get; set; }
        public virtual DbSet<status> status { get; set; }
        public virtual DbSet<tax_setting> tax_setting { get; set; }
        public virtual DbSet<transfer_item> transfer_item { get; set; }
        public virtual DbSet<uom_setting> uom_setting { get; set; }
        public virtual DbSet<user_log> user_log { get; set; }
        public virtual DbSet<wallet_history> wallet_history { get; set; }
        public virtual DbSet<building> building { get; set; }
        public virtual DbSet<customer> customer { get; set; }
    
        public virtual ObjectResult<SP_ChartDelivery_Result> SP_ChartDelivery(Nullable<System.DateTime> salesDate, Nullable<int> itemId)
        {
            var salesDateParameter = salesDate.HasValue ?
                new ObjectParameter("salesDate", salesDate) :
                new ObjectParameter("salesDate", typeof(System.DateTime));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ChartDelivery_Result>("SP_ChartDelivery", salesDateParameter, itemIdParameter);
        }
    
        public virtual ObjectResult<SP_DeliverySalesReport_Result> SP_DeliverySalesReport(Nullable<int> employeeId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> itemId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DeliverySalesReport_Result>("SP_DeliverySalesReport", employeeIdParameter, dateFromParameter, dateToParameter, itemIdParameter);
        }
    
        public virtual ObjectResult<SP_MiscWalletDefference_Result> SP_MiscWalletDefference()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MiscWalletDefference_Result>("SP_MiscWalletDefference");
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_OpeningStockPandL(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_OpeningStockPandL", dateParameter);
        }
    
        public virtual ObjectResult<SP_SalesMonthlyAnalysis_Result> SP_SalesMonthlyAnalysis(Nullable<int> saleyear)
        {
            var saleyearParameter = saleyear.HasValue ?
                new ObjectParameter("saleyear", saleyear) :
                new ObjectParameter("saleyear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SalesMonthlyAnalysis_Result>("SP_SalesMonthlyAnalysis", saleyearParameter);
        }
    
        public virtual ObjectResult<SP_SalesMonthlyItemAnalysis_Result> SP_SalesMonthlyItemAnalysis(Nullable<int> saleyear, Nullable<int> itemId)
        {
            var saleyearParameter = saleyear.HasValue ?
                new ObjectParameter("saleyear", saleyear) :
                new ObjectParameter("saleyear", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SalesMonthlyItemAnalysis_Result>("SP_SalesMonthlyItemAnalysis", saleyearParameter, itemIdParameter);
        }
    
        public virtual ObjectResult<SP_SyncCustomerOutstanding_Result> SP_SyncCustomerOutstanding()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SyncCustomerOutstanding_Result>("SP_SyncCustomerOutstanding");
        }
    
        public virtual ObjectResult<SP_SyncCustomerOutstandingRoutewise_Result> SP_SyncCustomerOutstandingRoutewise(Nullable<int> routeId)
        {
            var routeIdParameter = routeId.HasValue ?
                new ObjectParameter("routeId", routeId) :
                new ObjectParameter("routeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SyncCustomerOutstandingRoutewise_Result>("SP_SyncCustomerOutstandingRoutewise", routeIdParameter);
        }
    
        public virtual int SP_SyncDeliveryReturn()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SyncDeliveryReturn");
        }
    
        public virtual int SP_SyncUpdateOutstandingCollection(Nullable<int> dailycolelctionId)
        {
            var dailycolelctionIdParameter = dailycolelctionId.HasValue ?
                new ObjectParameter("dailycolelctionId", dailycolelctionId) :
                new ObjectParameter("dailycolelctionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SyncUpdateOutstandingCollection", dailycolelctionIdParameter);
        }
    
        public virtual ObjectResult<SP_TrialBalanceDetailed_Result> SP_TrialBalanceDetailed(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_TrialBalanceDetailed_Result>("SP_TrialBalanceDetailed", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<SP_TrialBalanceSummary_Result> SP_TrialBalanceSummary(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_TrialBalanceSummary_Result>("SP_TrialBalanceSummary", dateFromParameter, dateToParameter);
        }
    }
}
